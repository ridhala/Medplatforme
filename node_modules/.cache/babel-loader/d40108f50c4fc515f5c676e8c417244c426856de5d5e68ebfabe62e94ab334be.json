{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\nconst cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: retry(fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_CRYPTO_API_URL || '',\n    headers: {\n      'X-RapidAPI-Key': process.env.REACT_APP_RAPIDAPI_KEY || '',\n      'X-RapidAPI-Host': process.env.REACT_APP_CRYPTO_RAPIDAPI_HOST || ''\n    }\n  }), {\n    maxRetries: 6\n  }),\n  endpoints: builder => ({\n    getCoins: builder.query({\n      query: _ref => {\n        let {\n          limit = ''\n        } = _ref;\n        return `/coins${limit ? '?limit=' + limit : ''}`;\n      }\n    }),\n    getCoinDetails: builder.query({\n      query: _ref2 => {\n        let {\n          coinId = ''\n        } = _ref2;\n        return `/coin/${coinId}`;\n      }\n    }),\n    getCoinHistory: builder.query({\n      query: _ref3 => {\n        let {\n          coinId = '',\n          timePeriod = ''\n        } = _ref3;\n        return `/coin/${coinId}/history?timePeriod=${timePeriod}`;\n      }\n    }),\n    getCoinExchanges: builder.query({\n      query: _ref4 => {\n        let {\n          coinId = ''\n        } = _ref4;\n        return `/coin/${coinId}/exchanges`;\n      }\n    }),\n    getCoinMarkets: builder.query({\n      query: _ref5 => {\n        let {\n          coinId = ''\n        } = _ref5;\n        return `/coin/${coinId}/markets`;\n      }\n    }),\n    getReferenceCurrencies: builder.query({\n      query: _ref6 => {\n        let {\n          limit = '50',\n          type = 'coin'\n        } = _ref6;\n        return `/reference-currencies?limit=${limit}&types[0]=${type}`;\n      }\n    })\n  })\n});\nexport const counterSlice = createSlice({\n  name: 'coins',\n  initialState: {},\n  reducers: {}\n});\nexport const {\n  useGetCoinsQuery,\n  useGetCoinDetailsQuery,\n  useGetCoinHistoryQuery,\n  useGetCoinExchangesQuery,\n  useGetCoinMarketsQuery,\n  useGetReferenceCurrenciesQuery\n} = cryptoApi;\nexport { cryptoApi };","map":{"version":3,"names":["createSlice","createApi","fetchBaseQuery","retry","cryptoApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_CRYPTO_API_URL","headers","REACT_APP_RAPIDAPI_KEY","REACT_APP_CRYPTO_RAPIDAPI_HOST","maxRetries","endpoints","builder","getCoins","query","_ref","limit","getCoinDetails","_ref2","coinId","getCoinHistory","_ref3","timePeriod","getCoinExchanges","_ref4","getCoinMarkets","_ref5","getReferenceCurrencies","_ref6","type","counterSlice","name","initialState","reducers","useGetCoinsQuery","useGetCoinDetailsQuery","useGetCoinHistoryQuery","useGetCoinExchangesQuery","useGetCoinMarketsQuery","useGetReferenceCurrenciesQuery"],"sources":["C:/Users/ridha/Downloads/cryptoverse-main/src/redux/features/coins.feature.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\n\nconst cryptoApi = createApi({\n\treducerPath: 'cryptoApi',\n\n\tbaseQuery: retry(\n\t\tfetchBaseQuery({\n\t\t\tbaseUrl: process.env.REACT_APP_CRYPTO_API_URL || '',\n\t\t\theaders: {\n\t\t\t\t'X-RapidAPI-Key': process.env.REACT_APP_RAPIDAPI_KEY || '',\n\t\t\t\t'X-RapidAPI-Host': process.env.REACT_APP_CRYPTO_RAPIDAPI_HOST || '',\n\t\t\t},\n\t\t}),\n\t\t{ maxRetries: 6 }\n\t),\n\n\tendpoints: (builder) => ({\n\t\tgetCoins: builder.query({\n\t\t\tquery: ({ limit = '' }) => `/coins${limit ? '?limit=' + limit : ''}`,\n\t\t}),\n\t\tgetCoinDetails: builder.query({\n\t\t\tquery: ({ coinId = '' }) => `/coin/${coinId}`,\n\t\t}),\n\t\tgetCoinHistory: builder.query({\n\t\t\tquery: ({ coinId = '', timePeriod = '' }) =>\n\t\t\t\t`/coin/${coinId}/history?timePeriod=${timePeriod}`,\n\t\t}),\n\t\tgetCoinExchanges: builder.query({\n\t\t\tquery: ({ coinId = '' }) => `/coin/${coinId}/exchanges`,\n\t\t}),\n\t\tgetCoinMarkets: builder.query({\n\t\t\tquery: ({ coinId = '' }) => `/coin/${coinId}/markets`,\n\t\t}),\n\t\tgetReferenceCurrencies: builder.query({\n\t\t\tquery: ({ limit = '50', type = 'coin' }) =>\n\t\t\t\t`/reference-currencies?limit=${limit}&types[0]=${type}`,\n\t\t}),\n\t}),\n});\n\nexport const counterSlice = createSlice({\n\tname: 'coins',\n\tinitialState: {},\n\treducers: {},\n});\n\nexport const {\n\tuseGetCoinsQuery,\n\tuseGetCoinDetailsQuery,\n\tuseGetCoinHistoryQuery,\n\tuseGetCoinExchangesQuery,\n\tuseGetCoinMarketsQuery,\n\tuseGetReferenceCurrenciesQuery,\n} = cryptoApi;\nexport { cryptoApi };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,cAAc,EAAEC,KAAK,QAAQ,8BAA8B;AAE/E,MAAMC,SAAS,GAAGH,SAAS,CAAC;EAC3BI,WAAW,EAAE,WAAW;EAExBC,SAAS,EAAEH,KAAK,CACfD,cAAc,CAAC;IACdK,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE;IACnDC,OAAO,EAAE;MACR,gBAAgB,EAAEH,OAAO,CAACC,GAAG,CAACG,sBAAsB,IAAI,EAAE;MAC1D,iBAAiB,EAAEJ,OAAO,CAACC,GAAG,CAACI,8BAA8B,IAAI;IAClE;EACD,CAAC,CAAC,EACF;IAAEC,UAAU,EAAE;EAAE,CAAC,CACjB;EAEDC,SAAS,EAAGC,OAAO,KAAM;IACxBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACvBA,KAAK,EAAEC,IAAA;QAAA,IAAC;UAAEC,KAAK,GAAG;QAAG,CAAC,GAAAD,IAAA;QAAA,OAAM,SAAQC,KAAK,GAAG,SAAS,GAAGA,KAAK,GAAG,EAAG,EAAC;MAAA;IACrE,CAAC,CAAC;IACFC,cAAc,EAAEL,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAEI,KAAA;QAAA,IAAC;UAAEC,MAAM,GAAG;QAAG,CAAC,GAAAD,KAAA;QAAA,OAAM,SAAQC,MAAO,EAAC;MAAA;IAC9C,CAAC,CAAC;IACFC,cAAc,EAAER,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAEO,KAAA;QAAA,IAAC;UAAEF,MAAM,GAAG,EAAE;UAAEG,UAAU,GAAG;QAAG,CAAC,GAAAD,KAAA;QAAA,OACtC,SAAQF,MAAO,uBAAsBG,UAAW,EAAC;MAAA;IACpD,CAAC,CAAC;IACFC,gBAAgB,EAAEX,OAAO,CAACE,KAAK,CAAC;MAC/BA,KAAK,EAAEU,KAAA;QAAA,IAAC;UAAEL,MAAM,GAAG;QAAG,CAAC,GAAAK,KAAA;QAAA,OAAM,SAAQL,MAAO,YAAW;MAAA;IACxD,CAAC,CAAC;IACFM,cAAc,EAAEb,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAEY,KAAA;QAAA,IAAC;UAAEP,MAAM,GAAG;QAAG,CAAC,GAAAO,KAAA;QAAA,OAAM,SAAQP,MAAO,UAAS;MAAA;IACtD,CAAC,CAAC;IACFQ,sBAAsB,EAAEf,OAAO,CAACE,KAAK,CAAC;MACrCA,KAAK,EAAEc,KAAA;QAAA,IAAC;UAAEZ,KAAK,GAAG,IAAI;UAAEa,IAAI,GAAG;QAAO,CAAC,GAAAD,KAAA;QAAA,OACrC,+BAA8BZ,KAAM,aAAYa,IAAK,EAAC;MAAA;IACzD,CAAC;EACF,CAAC;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGlC,WAAW,CAAC;EACvCmC,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,CAAC,CAAC;EAChBC,QAAQ,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,OAAO,MAAM;EACZC,gBAAgB;EAChBC,sBAAsB;EACtBC,sBAAsB;EACtBC,wBAAwB;EACxBC,sBAAsB;EACtBC;AACD,CAAC,GAAGvC,SAAS;AACb,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}