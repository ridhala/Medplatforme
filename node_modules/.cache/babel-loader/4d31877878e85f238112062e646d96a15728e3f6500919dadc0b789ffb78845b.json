{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n  // Create a mutable copy of the base.\n  let denominator = DIGIT_GROUPING_BASE;\n  while (true) {\n    const result = value / denominator;\n    if (result < 1) {\n      // End of operation. We can't divide the value any further.\n      return;\n    }\n    yield result;\n    // The denominator is increased every iteration by multiplying\n    // the base by itself, until a decimal value remains.\n    denominator *= DIGIT_GROUPING_BASE;\n  }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n  var _a, _b;\n  // Override default options with options supplied by user.\n  const opts = options ? {\n    ...options_1.defaultOptions,\n    ...options\n  } : options_1.defaultOptions;\n  if (!Array.isArray(opts.units) || !opts.units.length) {\n    throw new Error(\"Option `units` must be a non-empty array\");\n  }\n  // If the input value is invalid, then return the value in string form.\n  // Originally this threw an error, but was changed to return a graceful fallback.\n  let val;\n  try {\n    val = utils_1.parseValue(value);\n  } catch (e) {\n    if (e instanceof Error) {\n      console.warn(`WARN: ${e.message} (millify)`);\n    }\n    // Invalid values will be converted to string as per `String()`.\n    return String(value);\n  }\n  // Add a minus sign (-) prefix if it's a negative number.\n  const prefix = val < 0 ? \"-\" : \"\";\n  // Work only with positive values for simplicity's sake.\n  val = Math.abs(val);\n  // Keep dividing the input value by the digit grouping base\n  // until the decimal and the unit index is deciphered.\n  let unitIndex = 0;\n  for (const result of divider(val)) {\n    val = result;\n    unitIndex += 1;\n  }\n  // Return the original number if the number is too large to have\n  // a corresponding unit. Returning anything else is ambiguous.\n  const unitIndexOutOfRange = unitIndex >= opts.units.length;\n  if (unitIndexOutOfRange) {\n    // At this point we don't know what to do with the input value,\n    // so we return it as is, without localizing the string.\n    return value.toString();\n  }\n  // Round decimal up to desired precision.\n  let rounded = utils_1.roundTo(val, opts.precision);\n  // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n  // The rounded value needs another iteration in the divider cycle.\n  for (const result of divider(rounded)) {\n    rounded = result;\n    unitIndex += 1;\n  }\n  // Calculate the unit suffix and make it lowercase (if needed).\n  const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n  const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n  // Add a space between number and abbreviation.\n  const space = opts.space ? \" \" : \"\";\n  // Format the number according to the desired locale.\n  const formatted = rounded.toLocaleString((_b = opts.locales) !== null && _b !== void 0 ? _b : utils_1.getLocales(), {\n    // toLocaleString needs the explicit fraction digits.\n    minimumFractionDigits: utils_1.getFractionDigits(rounded)\n  });\n  return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;","map":{"version":3,"names":["Object","defineProperty","exports","value","millify","options_1","require","utils_1","DIGIT_GROUPING_BASE","divider","denominator","result","options","_a","_b","opts","defaultOptions","Array","isArray","units","length","Error","val","parseValue","e","console","warn","message","String","prefix","Math","abs","unitIndex","unitIndexOutOfRange","toString","rounded","roundTo","precision","unit","suffix","lowercase","toLowerCase","space","formatted","toLocaleString","locales","getLocales","minimumFractionDigits","getFractionDigits","default"],"sources":["C:/Users/ridha/Downloads/cryptoverse-main/node_modules/millify/dist/millify.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n    // Create a mutable copy of the base.\n    let denominator = DIGIT_GROUPING_BASE;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            // End of operation. We can't divide the value any further.\n            return;\n        }\n        yield result;\n        // The denominator is increased every iteration by multiplying\n        // the base by itself, until a decimal value remains.\n        denominator *= DIGIT_GROUPING_BASE;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    var _a, _b;\n    // Override default options with options supplied by user.\n    const opts = options\n        ? { ...options_1.defaultOptions, ...options }\n        : options_1.defaultOptions;\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // If the input value is invalid, then return the value in string form.\n    // Originally this threw an error, but was changed to return a graceful fallback.\n    let val;\n    try {\n        val = utils_1.parseValue(value);\n    }\n    catch (e) {\n        if (e instanceof Error) {\n            console.warn(`WARN: ${e.message} (millify)`);\n        }\n        // Invalid values will be converted to string as per `String()`.\n        return String(value);\n    }\n    // Add a minus sign (-) prefix if it's a negative number.\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake.\n    val = Math.abs(val);\n    // Keep dividing the input value by the digit grouping base\n    // until the decimal and the unit index is deciphered.\n    let unitIndex = 0;\n    for (const result of divider(val)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    if (unitIndexOutOfRange) {\n        // At this point we don't know what to do with the input value,\n        // so we return it as is, without localizing the string.\n        return value.toString();\n    }\n    // Round decimal up to desired precision.\n    let rounded = utils_1.roundTo(val, opts.precision);\n    // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n    // The rounded value needs another iteration in the divider cycle.\n    for (const result of divider(rounded)) {\n        rounded = result;\n        unitIndex += 1;\n    }\n    // Calculate the unit suffix and make it lowercase (if needed).\n    const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n    const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    // Add a space between number and abbreviation.\n    const space = opts.space ? \" \" : \"\";\n    // Format the number according to the desired locale.\n    const formatted = rounded.toLocaleString((_b = opts.locales) !== null && _b !== void 0 ? _b : utils_1.getLocales(), {\n        // toLocaleString needs the explicit fraction digits.\n        minimumFractionDigits: utils_1.getFractionDigits(rounded),\n    });\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}