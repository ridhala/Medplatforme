{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocales = exports.getFractionDigits = exports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n  const val = parseFloat(value === null || value === void 0 ? void 0 : value.toString());\n  if (isNaN(val)) {\n    throw new Error(`Input value is not a number`);\n  }\n  if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n    throw new RangeError(\"Input value is outside of safe integer range\");\n  }\n  return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Input value is not a finite number\");\n  }\n  if (!Number.isInteger(precision) || precision < 0) {\n    throw new Error(\"Precision is not a positive integer\");\n  }\n  if (Number.isInteger(value)) {\n    return value;\n  }\n  return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;\n/**\n * Returns the number of digits after the decimal.\n */\nfunction getFractionDigits(num) {\n  var _a;\n  if (Number.isInteger(num)) {\n    return 0;\n  }\n  const decimalPart = num.toString().split(\".\")[1];\n  return (_a = decimalPart === null || decimalPart === void 0 ? void 0 : decimalPart.length) !== null && _a !== void 0 ? _a : 0;\n}\nexports.getFractionDigits = getFractionDigits;\n/**\n * Returns the default browser locales.\n */\nfunction getLocales() {\n  var _a;\n  if (typeof navigator === \"undefined\") {\n    return [];\n  }\n  return Array.from((_a = navigator.languages) !== null && _a !== void 0 ? _a : []);\n}\nexports.getLocales = getLocales;","map":{"version":3,"names":["Object","defineProperty","exports","value","getLocales","getFractionDigits","roundTo","parseValue","val","parseFloat","toString","isNaN","Error","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","RangeError","precision","isFinite","isInteger","toFixed","num","_a","decimalPart","split","length","navigator","Array","from","languages"],"sources":["C:/Users/ridha/Downloads/cryptoverse-main/node_modules/millify/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLocales = exports.getFractionDigits = exports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n    const val = parseFloat(value === null || value === void 0 ? void 0 : value.toString());\n    if (isNaN(val)) {\n        throw new Error(`Input value is not a number`);\n    }\n    if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n        throw new RangeError(\"Input value is outside of safe integer range\");\n    }\n    return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n    if (!Number.isFinite(value)) {\n        throw new Error(\"Input value is not a finite number\");\n    }\n    if (!Number.isInteger(precision) || precision < 0) {\n        throw new Error(\"Precision is not a positive integer\");\n    }\n    if (Number.isInteger(value)) {\n        return value;\n    }\n    return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;\n/**\n * Returns the number of digits after the decimal.\n */\nfunction getFractionDigits(num) {\n    var _a;\n    if (Number.isInteger(num)) {\n        return 0;\n    }\n    const decimalPart = num.toString().split(\".\")[1];\n    return (_a = decimalPart === null || decimalPart === void 0 ? void 0 : decimalPart.length) !== null && _a !== void 0 ? _a : 0;\n}\nexports.getFractionDigits = getFractionDigits;\n/**\n * Returns the default browser locales.\n */\nfunction getLocales() {\n    var _a;\n    if (typeof navigator === \"undefined\") {\n        return [];\n    }\n    return Array.from((_a = navigator.languages) !== null && _a !== void 0 ? _a : []);\n}\nexports.getLocales = getLocales;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,iBAAiB,GAAGH,OAAO,CAACI,OAAO,GAAGJ,OAAO,CAACK,UAAU,GAAG,KAAK,CAAC;AAC9F;AACA;AACA;AACA,SAASA,UAAUA,CAACJ,KAAK,EAAE;EACvB,MAAMK,GAAG,GAAGC,UAAU,CAACN,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACO,QAAQ,EAAE,CAAC;EACtF,IAAIC,KAAK,CAACH,GAAG,CAAC,EAAE;IACZ,MAAM,IAAII,KAAK,CAAE,6BAA4B,CAAC;EAClD;EACA,IAAIJ,GAAG,GAAGK,MAAM,CAACC,gBAAgB,IAAIN,GAAG,GAAGK,MAAM,CAACE,gBAAgB,EAAE;IAChE,MAAM,IAAIC,UAAU,CAAC,8CAA8C,CAAC;EACxE;EACA,OAAOR,GAAG;AACd;AACAN,OAAO,CAACK,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA,SAASD,OAAOA,CAACH,KAAK,EAAEc,SAAS,EAAE;EAC/B,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAACf,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIS,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACA,IAAI,CAACC,MAAM,CAACM,SAAS,CAACF,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EAAE;IAC/C,MAAM,IAAIL,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,IAAIC,MAAM,CAACM,SAAS,CAAChB,KAAK,CAAC,EAAE;IACzB,OAAOA,KAAK;EAChB;EACA,OAAOM,UAAU,CAACN,KAAK,CAACiB,OAAO,CAACH,SAAS,CAAC,CAAC;AAC/C;AACAf,OAAO,CAACI,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA,SAASD,iBAAiBA,CAACgB,GAAG,EAAE;EAC5B,IAAIC,EAAE;EACN,IAAIT,MAAM,CAACM,SAAS,CAACE,GAAG,CAAC,EAAE;IACvB,OAAO,CAAC;EACZ;EACA,MAAME,WAAW,GAAGF,GAAG,CAACX,QAAQ,EAAE,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO,CAACF,EAAE,GAAGC,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACE,MAAM,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;AACjI;AACApB,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA;AACA;AACA,SAASD,UAAUA,CAAA,EAAG;EAClB,IAAIkB,EAAE;EACN,IAAI,OAAOI,SAAS,KAAK,WAAW,EAAE;IAClC,OAAO,EAAE;EACb;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,CAACN,EAAE,GAAGI,SAAS,CAACG,SAAS,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,CAAC;AACrF;AACApB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}